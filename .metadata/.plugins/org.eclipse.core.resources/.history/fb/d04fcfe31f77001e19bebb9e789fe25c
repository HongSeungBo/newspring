package com.myweb.www.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

import com.myweb.www.security.LoginFauilureHandler;
import com.myweb.www.security.LoginSuccessHandler;
import com.myweb.www.security.customUserAuthMemberService;

import lombok.extern.slf4j.Slf4j;

@Configuration
@Slf4j
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	//security package를 생성하여 사용자 핸들러 생성
	
	//비밀번호 암호화 빈 객체 생성
	@Bean
	public PasswordEncoder bcPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	//SuccessHandler 빈 객체 생성 => 사용자가 생성
	@Bean
	public AuthenticationSuccessHandler authSuccessHandler() {
		return new LoginSuccessHandler();
	}
	
	//FailureHandler 빈 객체 생성 => 사용자가 생성
	@Bean
	public AuthenticationFailureHandler authFauilureHandler() {
		return new LoginFauilureHandler();
	}
	
	//UserDetail 빈 객체 생성 => 사용자가 생성
	@Bean
	public UserDetailsService customUserService() {
		return new customUserAuthMemberService();
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(customUserService()).passwordEncoder(bcPasswordEncoder());
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable();
		//승인 요청
		http.authorizeRequests().antMatchers("/member/list").hasRole("ADMIN").antMatchers("/","/board/list","/board/detail", "/upload/**", 
				"/resources/**","/member/register", "/member/login").permitAll()
		.anyRequest().authenticated(); // => 인증된 사용자만 처리
		
		//커스텀 로그인 페이지를 구성
		http.formLogin().usernameParameter("email").passwordParameter("pwd").loginPage("/member/login")
		.successHandler(authSuccessHandler()).failureHandler(authFauilureHandler());
		//login.jsp -> security.config -> 성공Handler -> AuthMember -> 성공Handler (성공시 리턴) // (실패시) -> 실패handler
		
		//로그아웃 페이지
		http.logout().logoutUrl("/member/logout").invalidateHttpSession(true).deleteCookies("JSESSIONID").logoutSuccessUrl("/");
	}
	
}
